{"filter":false,"title":"list.h","tooltip":"/list.h","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":64,"column":19},"action":"insert","lines":["/* tparse.h - A trivial command line parser example.","   Copyright (c) 2015, Monaco F. J. <moanco@icmc.usp.br>","   This file is part of POSIXeg.","   POSIXeg is free software: you can redistribute it and/or modify","   it under the terms of the GNU General Public License as published by","   the Free Software Foundation, either version 3 of the License, or","   (at your option) any later version.","   ","   This program is distributed in the hope that it will be useful,","   but WITHOUT ANY WARRANTY; without even the implied warranty of","   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","   GNU General Public License for more details.","   ","   You should have received a copy of the GNU General Public License","   along with this program.  If not, see <http://www.gnu.org/licenses/>.","*/","","#ifndef LIST_H","#define LIST_H","","/* Struct representing a node in double-linked list. ","   Nodes have a (void*) value which you can point to whatever kind","   of data you want. */","","typedef struct list_node_t list_node_t;","struct list_node_t","{","  list_node_t *next;\t\t/* Link to the next node. */","  list_node_t *previous;\t/* Link to the previous node. */","  void *value;\t\t\t/* Value associated to the node. */","};","","/* Struct representing a double-linked list. */","","typedef struct list_t","{","  int size;\t\t\t/* Number of nodes in the list. */","  list_node_t *first;\t\t/* First node; NULL if empty. */","  list_node_t *last;\t\t/* Last node; NULL if empty. */","  void (*del)(void *);\t\t/* Function used to free a node->value. */","} list_t;","","/* Return a pointer to a newly allocated and properly initialized double-linked","   list. You shuld pass a pointer to the function to be used to free the node","   value. For example, if your nodes point to a (char*) block, you can pass","   a pointer to a free(char *) .*/","","list_t * new_list (void (*)(void*));","","/* Release the memory used by a list (including all the nodes). */","","void release_list (list_t *);","","/* Append a node to the end of the list. */","","list_node_t * append_node (list_t *);","","/* Remove a node from the list (and free the node). */","","int del_node (list_t *, list_node_t *);","","/* Like strdup(), which is not ISO C. */","","","#endif\t/* LIST_H */"],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":64,"column":19},"end":{"row":64,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":704,"mode":"ace/mode/c_cpp"}},"timestamp":1499167577522,"hash":"4ebe3e03aca8353c4ae968688d45ab822a8946e8"}